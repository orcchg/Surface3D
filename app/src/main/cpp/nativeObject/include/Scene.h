/**
 * Copyright (c) 2015, Alov Maxim <alovmax@yandex.ru>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided with
 * the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SURFACE3D_SCENE_H_
#define SURFACE3D_SCENE_H_

#include "NativeObject.h"

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_orcchg_surface3d_Scene */

#ifndef _Included_com_orcchg_surface3d_Scene
#define _Included_com_orcchg_surface3d_Scene
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    nativeInit
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_orcchg_surface3d_Scene_nativeInit
  (JNIEnv *, jclass);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    nativeGetVertices
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_orcchg_surface3d_Scene_nativeGetVertices
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    nativeGetPolygons
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_orcchg_surface3d_Scene_nativeGetPolygons
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    nativeGetColors
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_orcchg_surface3d_Scene_nativeGetColors
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    nativeGetTextures
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_orcchg_surface3d_Scene_nativeGetTextures
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    nativeGetMaterials
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_orcchg_surface3d_Scene_nativeGetMaterials
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    nativeGetMeshes
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_orcchg_surface3d_Scene_nativeGetMeshes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    finalizeNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_orcchg_surface3d_Scene_finalizeNative
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    openAsset
 * Signature: (JJLjava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_orcchg_surface3d_Scene_openAsset
  (JNIEnv *, jobject, jlong, jlong, jstring, jstring);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    openFile
 * Signature: (JLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_orcchg_surface3d_Scene_openFile
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    storeResources
 * Signature: (JJ[Ljava/lang/String;[Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_orcchg_surface3d_Scene_storeResources__JJ_3Ljava_lang_String_2_3Ljava_lang_String_2
  (JNIEnv *, jobject, jlong, jlong, jobjectArray, jobjectArray);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    storeResources
 * Signature: (J[Ljava/lang/String;[Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_orcchg_surface3d_Scene_storeResources__J_3Ljava_lang_String_2_3Ljava_lang_String_2
  (JNIEnv *, jobject, jlong, jobjectArray, jobjectArray);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    fetchResources
 * Signature: (JJ[Ljava/lang/String;[Ljava/lang/String;[I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_orcchg_surface3d_Scene_fetchResources__JJ_3Ljava_lang_String_2_3Ljava_lang_String_2_3I
  (JNIEnv *, jobject, jlong, jlong, jobjectArray, jobjectArray, jintArray);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    fetchResources
 * Signature: (J[Ljava/lang/String;[Ljava/lang/String;[I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_orcchg_surface3d_Scene_fetchResources__J_3Ljava_lang_String_2_3Ljava_lang_String_2_3I
  (JNIEnv *, jobject, jlong, jobjectArray, jobjectArray, jintArray);

/*
 * Class:     com_orcchg_surface3d_Scene
 * Method:    getSeparateTexturesPaths
 * Signature: (J)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_com_orcchg_surface3d_Scene_getSeparateTexturesPaths
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif

#include <vector>

#include <android/asset_manager.h>
#include <android/asset_manager_jni.h>

#include <assimp/Importer.hpp>
#include <assimp/DefaultLogger.hpp>
#include <assimp/Logger.hpp>
#include <assimp/LogStream.hpp>
#include <assimp/ProgressHandler.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>

#include "logger.h"
#include "Texture.h"


namespace native {

class SceneProgressHandler : public Assimp::ProgressHandler {
public:
  SceneProgressHandler(JNIEnv* env, jobject object);
  virtual ~SceneProgressHandler();

  bool Update(float percentage) override final;

  static jmethodID method;

private:
  JNIEnv* jenv;
  jobject object;
};

/* Logging */
// ----------------------------------------------
class SceneAndroidDebugLogStream : public Assimp::LogStream {
public:
  void write(const char* message) override final { DBG("Assimp: %s", message); }
};

class SceneAndroidInfoLogStream : public Assimp::LogStream {
public:
  void write(const char* message) override final { INF("Assimp: %s", message); }
};

class SceneAndroidWarningLogStream : public Assimp::LogStream {
public:
  void write(const char* message) override final { WRN("Assimp: %s", message); }
};

class SceneAndroidErrorLogStream : public Assimp::LogStream {
public:
  void write(const char* message) override final { ERR("Assimp: %s", message); }
};

// ----------------------------------------------
class Scene : public NativeObject {
public:
  Scene();
  virtual ~Scene();

  Assimp::Importer* importer;
  const aiScene* scene;

  unsigned int totalVertices() const;
  unsigned int totalPolygons() const;
  unsigned int totalColors() const;
  inline unsigned int totalSeparateTextures() const { return textures.size(); }
  inline unsigned int totalEmbeddedTextures() const { return scene->mNumTextures; }
  inline unsigned int totalMaterials() const { return scene->mNumMaterials; }
  inline unsigned int totalMeshes() const { return scene->mNumMeshes; }

  std::vector<std::string> separateTexturesPaths() const;
  int findTextureIndexByName(const std::string& texture_name) const;

  // --------------------------------------------
  /* Used when fetching resources separately */
  // materials
  unsigned int materials_total;  // number of material files
  char** material_file_paths;  // paths in internal memory

  // not embedded textures
  std::vector<Texture*> textures;

  // --------------------------------------------
  /* Used when referencing resources via Assimp */
  // resources - materials & textures
  unsigned int resources_total;  // number of resource files
  char** resource_file_paths;  // paths in internal memory

  bool hasReferencedResources;
};

}  // namespace native

#endif /* SURFACE3D_SCENE_H_ */
